cephoperator:
  config:
    rookCsiEnableCephFS: true
    rookCsiEnableRBD: true
    rookCsiEnableGRPCMetrics: false
    csiEnableCephFSSnapshotter: true
    csiEnableRBDSnapshotter: true
    # Enable Ceph Kernel clients on kernel < 4.17 which support quotas for Cephfs
    # If you disable the kernel client, your application may be disrupted during upgrade.
    # See the upgrade guide: https://rook.io/docs/rook/master/ceph-upgrade.html  
    csiForceCephFSKernelClient: true
    # policy for modifying a volume's ownership or permissions when the RBD PVC is being mounted.
    # supported values are documented at https://kubernetes-csi.github.io/docs/support-fsgroup.html
    csiRbdFSGroupPolicy: ReadWriteOnceWithFSType
    # policy for modifying a volume's ownership or permissions when the CephFS PVC is being mounted.
    # supported values are documented at https://kubernetes-csi.github.io/docs/support-fsgroup.html
    csiCephFsGroupPolicy: ReadWriteOnceWithFSType
    rookCsiAllowUnsupportedVersion: false
    # Whether the OBC provisioner should watch on the operator namespace or not, if not the namespace of the cluster will be used
    rookOBCWatchOperatorNamespace: true
    # Whether to enable the flex driver. By default it is enabled and is fully supported, but will be deprecated in some future release
    # in favor of the CSI driver.  
    rookEnableFlexDriver: false
    # Whether to start the discovery daemon to watch for raw storage devices on nodes in the cluster.
    # This daemon does not need to run if you are only going to create your OSDs based on StorageClassDeviceSets with PVCs.
    rookEnableDiscoveryDaemon: false
    csiEnableVolumeReplication: false
  deployment:
    image: rook/ceph:v1.6.1
    config:
      rookCurrentNamespaceOnly: false
      # Set the path where the Rook agent can find the flex volumes
      flexVolumeDirPath: /etc/kubernetes/kubelet-plugins/volume/exec
      # The logging level for the operator: INFO | DEBUG
      rookLogLevel: INFO
      # The duration between discovering devices in the rook-discover daemonset.
      rookDiscoverDevicesInterval: 60m
      # Whether to start pods as privileged that mount a host path, which includes the Ceph mon and osd pods.
      # Set this to true if SELinux is enabled (e.g. OpenShift) to workaround the anyuid issues.
      # For more details see https://github.com/rook/rook/issues/1314#issuecomment-355799641      
      rookHostpathRequiresPrivileged: true
      # In some situations SELinux relabelling breaks (times out) on large filesystems, and doesn't work with cephfs ReadWriteMany volumes (last relabel wins).
      # Disable it here if you have similar issues.
      # For more details see https://github.com/rook/rook/issues/2417
      rookEnableSELinuxRelabeling: true
      # In large volumes it will take some time to chown all the files. Disable it here if you have performance issues.
      # For more details see https://github.com/rook/rook/issues/2254
      rookEnableFSGroup: true
      # Disable automatic orchestration when new devices are discovered
      rookDisableDeviceHotplug: false
      # Provide customised regex as the values using comma. For eg. regex for rbd based volume, value will be like "(?i)rbd[0-9]+".
      # In case of more than one regex, use comma to separate between them.
      # Default regex will be "(?i)dm-[0-9]+,(?i)rbd[0-9]+,(?i)nbd[0-9]+"
      # add regex expression after putting a comma to blacklist a disk
      # If value is empty, the default regex will be used.
      discoverDaemonUdevBlacklist: "(?i)dm-[0-9]+,(?i)rbd[0-9]+,(?i)nbd[0-9]+"
      # Whether to start machineDisruptionBudget and machineLabel controller to watch for the osd pods and MDBs.
      rookEnableMachineDisruptionBudget: false
      # Time to wait until the node controller will move Rook pods to other
      # nodes after detecting an unreachable node.
      # Pods affected by this setting are:
      # mgr, rbd, mds, rgw, nfs, PVC based mons and osds, and ceph toolbox
      # The value used in this variable replaces the default value of 300 secs
      # added automatically by k8s as Toleration for
      # <node.kubernetes.io/unreachable>
      # The total amount of time to reschedule Rook pods in healthy nodes
      # before detecting a <not ready node> condition will be the sum of:
      #  --> node-monitor-grace-period: 40 seconds (k8s kube-controller-manager flag)
      #  --> ROOK_UNREACHABLE_NODE_TOLERATION_SECONDS: 5 seconds
      rookUnreachableNodeTolerationSeconds: 5
